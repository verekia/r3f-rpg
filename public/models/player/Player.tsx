/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 player.glb -t 
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = '0TPose' | 'Idle' | 'Jump' | 'Run' | 'ShootLeft' | 'ShootRight' | 'SlashRight'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh
    Eyes: THREE.SkinnedMesh
    HairLong: THREE.SkinnedMesh
    HairShort: THREE.SkinnedMesh
    Root: THREE.Bone
    IKLegPoleL: THREE.Bone
    IKLegTargetL: THREE.Bone
    IKLegPoleR: THREE.Bone
    IKLegTargetR: THREE.Bone
  }
  materials: {
    Skin: THREE.MeshStandardMaterial
    Eyes: THREE.MeshStandardMaterial
    Hair: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/player.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Root} />
          <primitive object={nodes.IKLegPoleL} />
          <primitive object={nodes.IKLegTargetL} />
          <primitive object={nodes.IKLegPoleR} />
          <primitive object={nodes.IKLegTargetR} />
          <skinnedMesh name="Body" geometry={nodes.Body.geometry} material={materials.Skin} skeleton={nodes.Body.skeleton} />
          <skinnedMesh name="Eyes" geometry={nodes.Eyes.geometry} material={materials.Eyes} skeleton={nodes.Eyes.skeleton} />
          <skinnedMesh name="HairLong" geometry={nodes.HairLong.geometry} material={materials.Hair} skeleton={nodes.HairLong.skeleton} />
          <skinnedMesh name="HairShort" geometry={nodes.HairShort.geometry} material={materials.Hair} skeleton={nodes.HairShort.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/player.glb')
