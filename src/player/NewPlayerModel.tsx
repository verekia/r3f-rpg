/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 new-player.glb -t -T 
Files: new-player.glb [218.13KB] > /Users/verekia/Local/Code/r3f-rpg/public/models/player/new-player-transformed.glb [117.68KB] (46%)
*/

import React, { useEffect, useRef } from 'react'

import { useAnimations, useGLTF } from '@react-three/drei'
import { useGraph } from '@react-three/fiber'
import * as THREE from 'three'
import { GLTF, SkeletonUtils } from 'three-stdlib'

import useStore from '#/core/store'
import { chest, feet, hands, legs } from '#/gear/gear'

const Part = ({ def, nodes, name }) => (
  <group name={name}>
    {def.colors.map((c, i, arr) => (
      <skinnedMesh
        key={`${c}_${def.mesh}`}
        name={arr.length > 1 ? `${def.mesh}_${i + 1}` : def.mesh}
        geometry={nodes[arr.length > 1 ? `${def.mesh}_${i + 1}` : def.mesh].geometry}
        skeleton={nodes[arr.length > 1 ? `${def.mesh}_${i + 1}` : def.mesh].skeleton}
      >
        <meshLambertMaterial color={c} />
      </skinnedMesh>
    ))}
  </group>
)

type ActionName = '0TPose' | 'Idle' | 'Jump' | 'Run' | 'ShootLeft' | 'ShootRight' | 'SlashRight'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Body: THREE.SkinnedMesh
    Eyes_1: THREE.SkinnedMesh
    Eyes_2: THREE.SkinnedMesh
    Eyes_3: THREE.SkinnedMesh
    Eyes_4: THREE.SkinnedMesh
    Eyebrows: THREE.SkinnedMesh
    HairLong: THREE.SkinnedMesh
    HairShort: THREE.SkinnedMesh
    HairPunk: THREE.SkinnedMesh
    ArmorGloves_1: THREE.SkinnedMesh
    ArmorGloves_2: THREE.SkinnedMesh
    ArmorShirt_1: THREE.SkinnedMesh
    ArmorShirt_2: THREE.SkinnedMesh
    ArmorShorts_1: THREE.SkinnedMesh
    ArmorShorts_2: THREE.SkinnedMesh
    ArmorShoes_1: THREE.SkinnedMesh
    ArmorShoes_2: THREE.SkinnedMesh
    ArmorSkirt_1: THREE.SkinnedMesh
    ArmorSkirt_2: THREE.SkinnedMesh
    Root: THREE.Bone
    IKLegPoleL: THREE.Bone
    IKLegTargetL: THREE.Bone
    IKLegPoleR: THREE.Bone
    IKLegTargetR: THREE.Bone
  }
  materials: {}
  animations: GLTFAction[]
}

type GLTFResultWeapons = GLTF & {
  nodes: {
    Sword_1: THREE.Mesh
    Sword_2: THREE.Mesh
    Sword_3: THREE.Mesh
    Dagger_1: THREE.Mesh
    Dagger_2: THREE.Mesh
    Dagger_3: THREE.Mesh
    Gun_1: THREE.Mesh
    Gun_2: THREE.Mesh
    Gun_3: THREE.Mesh
  }
  materials: {
    WhiteMetal: THREE.MeshStandardMaterial
    Laser: THREE.MeshStandardMaterial
    Kevlar: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

const PLAYER_PATH = '/models/player/player-transformed.glb'
const WEAPONS_PATH = '/models/player/weapons.glb'

export function Model(
  props: JSX.IntrinsicElements['group'] & {
    action: ActionName
    weapon: 'sword' | 'gun' | 'dagger'
    weaponTier: 'wooden' | 'cyber' | 'evil'
  },
) {
  const groupRef = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF(PLAYER_PATH)
  const { nodes: weaponNodes } = useGLTF(WEAPONS_PATH) as GLTFResultWeapons
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, groupRef)
  const rightWeaponRef = useRef<THREE.Group>(null)
  const skin = useStore(s => s.skin)
  const hair = useStore(s => s.hair)
  const hairLength = useStore(s => s.hairLength)

  const legsName = useStore(s => s.legs)
  const chestName = useStore(s => s.chest)
  const feetName = useStore(s => s.feet)
  const handsName = useStore(s => s.hands)

  const chestDef = chest[chestName]
  const legsDef = legs[legsName]
  const handsDef = hands[handsName]
  const feetDef = feet[feetName]

  useEffect(() => {
    actions[props.action]?.reset().fadeIn(0.12).play()
    return () => {
      actions[props.action]?.fadeOut(0.12)
    }
  }, [props.action, actions])

  useEffect(() => {
    const initialRightWeaponRef = rightWeaponRef.current
    const handBone = groupRef.current.getObjectByName('HandR')
    handBone.add(rightWeaponRef.current)
    rightWeaponRef.current.position.set(0, 0.35, 0)

    return () => {
      handBone.remove(initialRightWeaponRef)
    }
  }, [])

  return (
    <group ref={groupRef} {...props} dispose={null} rotation-y={Math.PI / 2}>
      <primitive object={nodes.Root} />
      <primitive object={nodes.IKLegPoleL} />
      <primitive object={nodes.IKLegTargetL} />
      <primitive object={nodes.IKLegPoleR} />
      <primitive object={nodes.IKLegTargetR} />
      <skinnedMesh name="Body" geometry={nodes.Body.geometry} skeleton={nodes.Body.skeleton}>
        <meshLambertMaterial color={skin} />
      </skinnedMesh>
      <group name="Eyes">
        <skinnedMesh
          name="Eyes_1"
          geometry={nodes.Eyes_1.geometry}
          skeleton={nodes.Eyes_1.skeleton}
        >
          <meshLambertMaterial color="#fff" />
        </skinnedMesh>
        <skinnedMesh
          name="Eyes_2"
          geometry={nodes.Eyes_2.geometry}
          skeleton={nodes.Eyes_2.skeleton}
        >
          <meshLambertMaterial color="#36f" />
        </skinnedMesh>
        <skinnedMesh
          name="Eyes_3"
          geometry={nodes.Eyes_3.geometry}
          skeleton={nodes.Eyes_3.skeleton}
        >
          <meshLambertMaterial color="#222" />
        </skinnedMesh>
        <skinnedMesh
          name="Eyes_4"
          geometry={nodes.Eyes_4.geometry}
          skeleton={nodes.Eyes_4.skeleton}
        >
          <meshLambertMaterial color={skin} />
        </skinnedMesh>
      </group>
      <skinnedMesh
        name="Eyebrows"
        geometry={nodes.Eyebrows.geometry}
        skeleton={nodes.Eyebrows.skeleton}
      >
        <meshLambertMaterial color={hair} />
      </skinnedMesh>
      {hairLength === 'long' ? (
        <skinnedMesh
          key="hairLong"
          name="HairLong"
          geometry={nodes.HairLong.geometry}
          skeleton={nodes.HairLong.skeleton}
        >
          <meshLambertMaterial color={hair} />
        </skinnedMesh>
      ) : hairLength === 'short' ? (
        <skinnedMesh
          key="hairShort"
          name="HairShort"
          geometry={nodes.HairShort.geometry}
          skeleton={nodes.HairShort.skeleton}
        >
          <meshLambertMaterial color={hair} />
        </skinnedMesh>
      ) : hairLength === 'punk' ? (
        <skinnedMesh
          key="hairPunk"
          name="HairPunk"
          geometry={nodes.HairPunk.geometry}
          skeleton={nodes.HairPunk.skeleton}
        >
          <meshLambertMaterial color={hair} />
        </skinnedMesh>
      ) : null}

      {legsDef && <Part name="LegsArmor" def={legsDef} nodes={nodes} />}
      {chestDef && <Part name="ChestArmor" def={chestDef} nodes={nodes} />}
      {handsDef && <Part name="HandsArmor" def={handsDef} nodes={nodes} />}
      {feetDef && <Part name="FeetArmor" def={feetDef} nodes={nodes} />}

      <group dispose={null} ref={rightWeaponRef} rotation-x={Math.PI / 2} rotation-y={Math.PI}>
        {props.weapon === 'sword' ? (
          // Without a key, the weapons do not get swapped out correctly
          <group key="sword">
            <mesh geometry={weaponNodes.Sword_1.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? '#843'
                    : props.weaponTier === 'cyber'
                      ? '#eee'
                      : '#222'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Sword_2.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#0fd'
                      : '#a00'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Sword_3.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#222'
                      : '#a00'
                }
              />
            </mesh>
          </group>
        ) : props.weapon === 'gun' ? (
          <group key="gun">
            <mesh geometry={weaponNodes.Gun_1.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? '#843'
                    : props.weaponTier === 'cyber'
                      ? '#eee'
                      : '#222'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Gun_2.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#0fd'
                      : '#a00'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Gun_3.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#222'
                      : '#a00'
                }
              />
            </mesh>
          </group>
        ) : props.weapon === 'dagger' ? (
          <group key="dagger">
            <mesh geometry={weaponNodes.Dagger_1.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? '#843'
                    : props.weaponTier === 'cyber'
                      ? '#eee'
                      : '#222'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Dagger_2.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#0fd'
                      : '#a00'
                }
              />
            </mesh>
            <mesh geometry={weaponNodes.Dagger_3.geometry}>
              <meshLambertMaterial
                color={
                  props.weaponTier === 'wooden'
                    ? 'orange'
                    : props.weaponTier === 'cyber'
                      ? '#222'
                      : '#a00'
                }
              />
            </mesh>
          </group>
        ) : null}
      </group>
    </group>
  )
}

useGLTF.preload(PLAYER_PATH)
useGLTF.preload(WEAPONS_PATH)
