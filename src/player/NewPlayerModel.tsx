/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 new-player.glb -t -T 
Files: new-player.glb [218.13KB] > /Users/verekia/Local/Code/r3f-rpg/public/models/player/new-player-transformed.glb [117.68KB] (46%)
*/

import React, { useEffect } from 'react'

import { useAnimations, useGLTF } from '@react-three/drei'
import { useGraph } from '@react-three/fiber'
import * as THREE from 'three'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = '0TPose' | 'Idle' | 'Jump' | 'Run' | 'ShootLeft' | 'ShootRight'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Eyes: THREE.Mesh
    Hair_1: THREE.Mesh
    Gun: THREE.Mesh
    Dagger: THREE.Mesh
    Player: THREE.SkinnedMesh
    Root: THREE.Bone
    IKLegPoleL: THREE.Bone
    IKLegTargetL: THREE.Bone
    IKLegPoleR: THREE.Bone
    IKLegTargetR: THREE.Bone
  }
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial
    PaletteMaterial002: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group'] & { action: ActionName }) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/models/player/new-player-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    actions[props.action]?.reset().fadeIn(0.12).play()
    return () => {
      actions[props.action]?.fadeOut(0.12)
    }
  }, [props.action, actions])

  return (
    <group ref={group} {...props} dispose={null} rotation-y={Math.PI / 2}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Root} />
          <primitive object={nodes.IKLegPoleL} />
          <primitive object={nodes.IKLegTargetL} />
          <primitive object={nodes.IKLegPoleR} />
          <primitive object={nodes.IKLegTargetR} />
        </group>
        <skinnedMesh
          name="Player"
          geometry={nodes.Player.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.Player.skeleton}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/models/player/new-player-transformed.glb')
